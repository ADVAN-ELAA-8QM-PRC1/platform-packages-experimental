// Copyright 2013 Google Inc. All Rights Reserved.
// Author: alasdair@google.com (Alasdair Mackintosh)
//
// Interaction data captured by the PixelPerfect PersonalRecorder app. Records
// how a user interacts with installed applications on their Android device.

syntax = "proto2";

option optimize_for = LITE_RUNTIME;

option java_package = "com.google.common.logging";
option java_outer_classname = "RecordedEvent";

package wireless_android_play_playlog;

// The data contained in an android.graphics.Rect object
message RecordedRect {
  optional int32 bottom = 1;
  optional int32 left = 2;
  optional int32 right = 3;
  optional int32 top = 4;
}

message RecordedTypes {
  // Represents the type of an Android screen widget.
  enum WidgetType {
    CUSTOM = 0;  // Not a predefined Android type
    APP_WIDGET_HOST_VIEW = 1;  // android.appwidget.AppWidgetHostView
    VIEW = 2;  // android.view.View
    WEB_VIEW = 3;  // android.webkit.WebView
    BUTTON = 4;  // android.widget.Button
    CHECK_BOX = 5;  // android.widget.CheckBox
    CHECKED_TEXT_VIEW = 6;  // android.widget.CheckedTextView
    EDIT_TEXT = 7;  // android.widget.EditText
    FRAME_LAYOUT = 8;  // android.widget.FrameLayout
    HORIZONTAL_SCROLL_VIEW = 9;  // android.widget.HorizontalScrollView
    IMAGE_BUTTON = 10;  // android.widget.ImageButton
    IMAGE_VIEW = 11;  // android.widget.ImageView
    LINEAR_LAYOUT = 12;  // android.widget.LinearLayout
    LIST_VIEW = 13;  // android.widget.ListView
    MULTI_AUTO_COMPLETE_TEXT_VIEW = 14;  // android.widget.MultiAutoCompleteTextView
    PROGRESS_BAR = 15;  // android.widget.ProgressBar
    RELATIVE_LAYOUT = 16;  // android.widget.RelativeLayout
    SCROLL_VIEW = 17;  // android.widget.ScrollView
    SPINNER = 18;  // android.widget.Spinner
    SWITCH = 19;  // android.widget.Switch
    TAB_HOST = 20;  // android.widget.TabHost
    TAB_WIDGET = 21;  // android.widget.TabWidget
    TEXT_VIEW = 22;  // android.widget.TextView
    VIEW_SWITCHER = 23;  // android.widget.ViewSwitcher
  }
}

// Represents an image, such as for screen shots.
// Next available id: 6
message Bitmap {
  // Possible bitmap configurations.
  // http://go/android-reference/android/graphics/Bitmap.Config.html
  // Next available id: 3
  message BitmapConfig {
    enum Config {
      UNKNOWN = 0;
      ALPHA_8 = 1;
      ARGB_4444 = 2;
      ARGB_8888 = 3;
      RGB_565 = 4;
    }
    // tag 1 is deprecated.
    optional Config value = 2;
  };

  // Known formats that the bitmap can be compressed to.
  // http://go/android-reference/android/graphics/Bitmap.CompressFormat.html
  // Next available id: 4
  message CompressionConfig {
    enum CompressFormat {
      UNKNOWN = 0;
      JPEG = 1;
      PNG = 2;
      WEBP = 3;
    }
    // tag 1 is deprecated.
    optional CompressFormat format = 2;
    optional int32 quality = 3;
  };

  // The actual bitmap.
  optional bytes bitmap = 1;
  optional int32 height = 2;
  optional int32 width = 3;
  // Bitmap and compression config.
  optional BitmapConfig bitmap_config = 4;
  optional CompressionConfig compression_config = 5;
}

message Screenshot {
  // Bitmap of the screenshot.
  optional Bitmap bitmap = 1;
  // Display rotation when screenshot was taken. We could "fix" the orientation
  // at the client, but it may be useful to preserve this information and let
  // any fixing, if required, be done by the analysis and processing machinery.
  // http://go/android-reference/android/view/Surface.html#ROTATION_0
  optional int32 rotation = 2;
};

// Represents an Android UI element, and optionally its children.  Next
// available id = 10
message UIElement {
  // The type of the element. If the type is CUSTOM, the class_name will be set
  // to the full class name of the element's widget type. Otherwise the class
  // name will be empty. (We use this to avoid transmitting unnecessary string
  // data.)
  optional RecordedTypes.WidgetType class_type = 1 [default = CUSTOM];

  optional string class_name = 2;

  // The name of the Android UI resource. (The "android:id" property defined in
  // the app's layout XML file.)
  optional string resource_name = 3;

  // The android:contentDescription of this view item, if specified.
  optional string description = 4;

  // The text content of this item, if any.
  optional string content = 5;

  // Whether the content of the UIElement are intentionally elided.
  // This happens for sensitive fields, such as passwords.
  optional bool content_elided = 8 [default = false];

  // The boundary of this element, relative to its parent. See
  // http://developer.android.com/reference/android/view/accessibility/
  // AccessibilityNodeInfo.html#getBoundsInParent(android.graphics.Rect)
  optional RecordedRect rect = 6;

  // Screenshot for the corresponding UI element.
  // Screenshot is genuinely optional, and should not be assumed to be
  // present.
  optional Screenshot screenshot = 9;

  // Children of this element.
  repeated UIElement child = 7;
}

// Represents an update to the user's application, either caused by a direct
// user action (pressing a button, entering text) or by the application
// performing a screen update.
message RecordedUpdate {
  // The type of the update. Corresponds to the types defined in
  // android.view.accessibility.AccessibilityEvent.
  enum Type {
    UNSET = 0;
    TYPE_NOTIFICATION_STATE_CHANGED = 1;
    TYPE_VIEW_CLICKED = 2;
    TYPE_VIEW_FOCUSED = 3;
    TYPE_VIEW_LONG_CLICKED = 4;
    TYPE_VIEW_SCROLLED = 5;
    TYPE_VIEW_SELECTED = 6;
    TYPE_VIEW_TEXT_CHANGED = 7;
    TYPE_VIEW_TEXT_SELECTION_CHANGED = 8;
    TYPE_WINDOW_CONTENT_CHANGED = 9;
  }
  optional Type type = 1;

  // The name of the package that triggered this event. Taken from the
  // getPackageName() method in android.view.accessibility.AccessibilityEvent.
  // E.g. "com.android.launcher" or "com.google.android.youtube".
  optional string package_name = 4;

  // The UIElement that this update applies to. If the type is
  // TYPE_WINDOW_CONTENT_CHANGED, then the element represents the root window,
  // and its children will be recursively populated. Otherwise it represents the
  // UI element where the event took place (e.g. the item that was clicked on)
  // and the children will not be populated.
  optional UIElement element = 2;

  // The version of the recorder application that published this udpate.
  optional string version = 3;
}
